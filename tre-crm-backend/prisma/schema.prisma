// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  phone         String?
  password_hash String?  // For authentication
  role          UserRole @default(AGENT)
  status        UserStatus @default(ACTIVE)
  active        Boolean  @default(true)
  hire_date     DateTime @default(now())
  license_number String?
  specialties   String[]
  notes         String?
  last_login    DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  created_by    String?  // Who created this user
  invited_at    DateTime? // When invitation was sent
  accepted_at   DateTime? // When invitation was accepted
  offboarded_at DateTime? // When user was offboarded/terminated
  suspended_at  DateTime? // When user was suspended
  suspended_by  String?   // Who suspended the user
  suspension_reason String? // Reason for suspension
  access_revoked Boolean @default(false) // Flag to revoke all access

  // Relations
  found_leads     Lead[] @relation("FoundByAgent")
  assigned_leads  Lead[] @relation("AssignedAgent")
  created_showcases Showcase[]
  lead_interests  LeadInterest[]
  created_users   User[] @relation("UserCreator")
  creator         User?  @relation("UserCreator", fields: [created_by], references: [id])
  suspended_users User[] @relation("UserSuspender")
  suspender       User?  @relation("UserSuspender", fields: [suspended_by], references: [id])
  audit_logs      AuditLog[]
  performed_audits AuditLog[] @relation("AuditPerformer")
  reported_bugs   Bug[] @relation("BugReporter")
  assigned_bugs   Bug[] @relation("BugAssignee")

  @@map("users")
}

model Lead {
  id                String      @id @default(cuid())
  name              String
  email             String
  phone             String
  submitted_at      DateTime    @default(now())
  found_by_agent_id String
  assigned_agent_id String?
  health_status     HealthStatus @default(GREEN)
  status            String      @default("new")
  source            String      @default("web_form")
  
  // Preferences (stored as JSON)
  prefs             Json?
  
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  // Relations
  found_by_agent    User        @relation("FoundByAgent", fields: [found_by_agent_id], references: [id])
  assigned_agent    User?       @relation("AssignedAgent", fields: [assigned_agent_id], references: [id])
  document_status   DocumentStatus?
  showcases         Showcase[]
  interests         LeadInterest[]

  @@map("leads")
}

model Property {
  id                    String   @id @default(cuid())
  name                  String
  market                String
  neighborhoods         String[]
  beds_min              Int
  beds_max              Int
  baths_min             Int
  baths_max             Int
  rent_min              Int
  rent_max              Int
  sqft_min              Int
  sqft_max              Int
  amenities             String[]
  escort_pct            Float    @default(0.0)
  send_pct              Float    @default(0.0)
  bonus_text            String?
  specials_text         String?
  website               String?
  address               String
  phone                 String?
  pricing_last_updated  DateTime @default(now())
  lat                   Float?
  lng                   Float?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  // Relations
  showcases             ShowcaseProperty[]
  interests             LeadInterest[]

  @@map("properties")
}

model DocumentStatus {
  id          String   @id @default(cuid())
  lead_id     String   @unique
  current_step Int     @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  lead        Lead     @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  steps       DocumentStep[]

  @@map("document_statuses")
}

model DocumentStep {
  id                String           @id @default(cuid())
  document_status_id String
  step_number       Int
  name              String
  status            StepStatus       @default(PENDING)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  // Relations
  document_status   DocumentStatus   @relation(fields: [document_status_id], references: [id], onDelete: Cascade)
  attachments       Attachment[]

  @@unique([document_status_id, step_number])
  @@map("document_steps")
}

model Attachment {
  id                String       @id @default(cuid())
  document_step_id  String
  filename          String
  original_name     String
  file_path         String
  file_size         Int
  mime_type         String?
  created_at        DateTime     @default(now())

  // Relations
  document_step     DocumentStep @relation(fields: [document_step_id], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Showcase {
  id            String   @id @default(cuid())
  lead_id       String
  agent_id      String
  listing_ids   String[]
  message       String?
  public_slug   String   @unique
  status        String   @default("sent") // sent, opened, clicked, converted
  landing_url   String?
  expires_at    DateTime?
  sent_at       DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  lead          Lead     @relation(fields: [lead_id], references: [id])
  agent         User     @relation(fields: [agent_id], references: [id])
  listings      ShowcaseProperty[]
  interactions  ShowcaseInteraction[]

  @@map("showcases")
}

model ShowcaseProperty {
  id           String    @id @default(cuid())
  showcase_id  String
  property_id  String
  created_at   DateTime  @default(now())

  // Relations
  showcase     Showcase  @relation(fields: [showcase_id], references: [id], onDelete: Cascade)
  property     Property  @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@unique([showcase_id, property_id])
  @@map("showcase_properties")
}

model ShowcaseInteraction {
  id           String   @id @default(cuid())
  showcase_id  String
  action       String   // page_view, property_click, tour_scheduled, etc.
  property_id  String?
  metadata     Json?
  created_at   DateTime @default(now())

  // Relations
  showcase     Showcase @relation(fields: [showcase_id], references: [id], onDelete: Cascade)

  @@map("showcase_interactions")
}

model LeadInterest {
  id            String   @id @default(cuid())
  lead_id       String
  property_id   String
  agent_id      String
  interest_type String   @default("showcase") // showcase, direct_interest, tour_scheduled
  status        String   @default("interested") // interested, not_interested, converted
  notes         String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  lead          Lead     @relation(fields: [lead_id], references: [id])
  property      Property @relation(fields: [property_id], references: [id])
  agent         User     @relation(fields: [agent_id], references: [id])

  @@unique([lead_id, property_id])
  @@map("lead_interests")
}

model AuditLog {
  id            String   @id @default(cuid())
  action        String   // user_created, user_updated, user_deleted, role_changed, password_changed
  user_id       String?  // The user being acted upon
  user_name     String?  // Name of the user being acted upon
  user_email    String?  // Email of the user being acted upon
  performed_by  String   // Who performed the action
  performed_by_name String // Name of who performed the action
  details       String   // Description of what happened
  metadata      Json?    // Additional data
  created_at    DateTime @default(now())

  // Relations
  user          User?    @relation(fields: [user_id], references: [id])
  performer     User     @relation("AuditPerformer", fields: [performed_by], references: [id])

  @@map("audit_logs")
}

model Bug {
  id                String      @id @default(cuid())
  title             String
  description       String
  expected          String?
  steps             String?
  status            BugStatus   @default(PENDING)
  priority          BugPriority @default(MEDIUM)
  category          BugCategory @default(OTHER)
  page              String      // Which page the bug was reported from
  page_url          String      // Full URL where bug was reported
  reported_by       String      // User ID who reported the bug
  reported_by_name  String      // Name of user who reported the bug
  assigned_to       String?     // User ID assigned to fix the bug
  assigned_to_name  String?     // Name of user assigned to fix the bug
  resolution_notes  String?     // Notes about how the bug was resolved
  screenshot_url    String?     // URL to screenshot in Supabase Storage
  technical_context Json        // Browser info, screen resolution, etc.
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  // Relations
  reporter          User        @relation("BugReporter", fields: [reported_by], references: [id])
  assignee          User?       @relation("BugAssignee", fields: [assigned_to], references: [id])

  @@map("bugs")
}

// Enums
enum UserRole {
  MANAGER
  AGENT
  SUPER_USER
}

enum UserStatus {
  ACTIVE
  INVITED
  PENDING
  SUSPENDED
  OFFBOARDED
}

enum HealthStatus {
  GREEN
  YELLOW
  RED
  CLOSED
  LOST
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum BugStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum BugPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugCategory {
  UI
  FUNCTIONALITY
  PERFORMANCE
  DATA
  NAVIGATION
  OTHER
}