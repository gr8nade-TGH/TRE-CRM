// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  phone         String?
  role          UserRole @default(AGENT)
  active        Boolean  @default(true)
  hire_date     DateTime @default(now())
  license_number String?
  specialties   String[]
  notes         String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  found_leads     Lead[] @relation("FoundByAgent")
  assigned_leads  Lead[] @relation("AssignedAgent")
  created_showcases Showcase[]

  @@map("users")
}

model Lead {
  id                String      @id @default(cuid())
  name              String
  email             String
  phone             String
  submitted_at      DateTime    @default(now())
  found_by_agent_id String
  assigned_agent_id String?
  health_status     HealthStatus @default(GREEN)
  status            String      @default("new")
  source            String      @default("web_form")
  
  // Preferences (stored as JSON)
  prefs             Json?
  
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  // Relations
  found_by_agent    User        @relation("FoundByAgent", fields: [found_by_agent_id], references: [id])
  assigned_agent    User?       @relation("AssignedAgent", fields: [assigned_agent_id], references: [id])
  document_status   DocumentStatus?
  showcases         Showcase[]

  @@map("leads")
}

model Property {
  id                    String   @id @default(cuid())
  name                  String
  market                String
  neighborhoods         String[]
  beds_min              Int
  beds_max              Int
  baths_min             Int
  baths_max             Int
  rent_min              Int
  rent_max              Int
  sqft_min              Int
  sqft_max              Int
  amenities             String[]
  escort_pct            Float    @default(0.0)
  send_pct              Float    @default(0.0)
  bonus_text            String?
  specials_text         String?
  website               String?
  address               String
  phone                 String?
  pricing_last_updated  DateTime @default(now())
  lat                   Float?
  lng                   Float?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  // Relations
  showcases             ShowcaseProperty[]

  @@map("properties")
}

model DocumentStatus {
  id          String   @id @default(cuid())
  lead_id     String   @unique
  current_step Int     @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  lead        Lead     @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  steps       DocumentStep[]

  @@map("document_statuses")
}

model DocumentStep {
  id                String           @id @default(cuid())
  document_status_id String
  step_number       Int
  name              String
  status            StepStatus       @default(PENDING)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  // Relations
  document_status   DocumentStatus   @relation(fields: [document_status_id], references: [id], onDelete: Cascade)
  attachments       Attachment[]

  @@unique([document_status_id, step_number])
  @@map("document_steps")
}

model Attachment {
  id                String       @id @default(cuid())
  document_step_id  String
  filename          String
  original_name     String
  file_path         String
  file_size         Int
  mime_type         String?
  created_at        DateTime     @default(now())

  // Relations
  document_step     DocumentStep @relation(fields: [document_step_id], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Showcase {
  id           String   @id @default(cuid())
  lead_id      String
  agent_id     String
  listing_ids  String[]
  message      String?
  public_slug  String   @unique
  sent_at      DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  lead         Lead     @relation(fields: [lead_id], references: [id])
  agent        User     @relation(fields: [agent_id], references: [id])
  listings     ShowcaseProperty[]

  @@map("showcases")
}

model ShowcaseProperty {
  id           String    @id @default(cuid())
  showcase_id  String
  property_id  String
  created_at   DateTime  @default(now())

  // Relations
  showcase     Showcase  @relation(fields: [showcase_id], references: [id], onDelete: Cascade)
  property     Property  @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@unique([showcase_id, property_id])
  @@map("showcase_properties")
}

// Enums
enum UserRole {
  MANAGER
  AGENT
}

enum HealthStatus {
  GREEN
  YELLOW
  RED
  CLOSED
  LOST
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}